/* snippet candidates: SELECT, CONSTRUCT, ASK, DESCRIBE, INSERT, DELETE */
{
	"scope": "source.sparql",
	"completions": [
		{ "trigger":"ABS", "contents":"ABS($0)" },
		{ "trigger":"AVG", "contents":"AVG($0)" },
		{ "trigger":"BIND", "contents":"BIND( $1 AS $0 ) ." },
		{ "trigger":"BNODE", "contents":"BNODE($0)" },
		{ "trigger":"BOUND", "contents":"BOUND($0)" },
		{ "trigger":"CEIL", "contents":"CEIL($0)" },
		{ "trigger":"COALESCE", "contents":"COALESCE($0)" },
		{ "trigger":"CONCAT", "contents":"CONCAT($0)" },
		{ "trigger":"CONTAINS", "contents":"CONTAINS($1, $0)" },
		{ "trigger":"COUNT", "contents":"COUNT($0)" },
		{ "trigger":"DATATYPE", "contents":"DATATYPE($0)" },
		{ "trigger":"DAY", "contents":"DAY($0)" },
		{ "trigger":"ENCODE_FOR_URI", "contents":"ENCODE_FOR_URI($0)" },
		{ "trigger":"EXISTS", "contents":"EXISTS($0)" },
		{ "trigger":"FILTER", "contents":"FILTER( $0 ) ." },
		{ "trigger":"FLOOR", "contents":"FLOOR($0)" },
		{ "trigger":"GROUP_CONCAT", "contents":"GROUP_CONCAT($0)" },
		{ "trigger":"HOURS", "contents":"HOURS($0)" },
		{ "trigger":"IF", "contents":"IF($1, $2, $0)" },
		{ "trigger":"IRI", "contents":"IRI($0)" },
		{ "trigger":"isBLANK", "contents":"isBLANK($0)" },
		{ "trigger":"isIRI", "contents":"isIRI($0)" },
		{ "trigger":"isLITERAL", "contents":"isLITERAL($0)" },
		{ "trigger":"isNUMERIC", "contents":"isNUMERIC($0)" },
		{ "trigger":"isURI", "contents":"isURI($0)" },
		{ "trigger":"LANG", "contents":"LANG($0)" },
		{ "trigger":"LANGMATCHES", "contents":"LANGMATCHES($1, $0)" },
		{ "trigger":"LCASE", "contents":"LCASE($0)" },
		{ "trigger":"MAX", "contents":"MAX($0)" },
		{ "trigger":"MD5", "contents":"MD5{ $0 } ." },
		{ "trigger":"MIN", "contents":"MIN($0)" },
		{ "trigger":"MINUS", "contents":"MINUS{ $0 }" },
		{ "trigger":"MINUTES", "contents":"MINUTES($0)" },
		{ "trigger":"MONTH", "contents":"MONTH($0)" },
		{ "trigger":"OPTIONAL", "contents":"OPTIONAL{ $0 }" },
		{ "trigger":"PREFIX", "contents":"PREFIX $1: <http://$0>" },
		{ "trigger":"REGEX", "contents":"REGEX($1, $0)" },
		{ "trigger":"REPLACE", "contents":"REPLACE($1, $2, $0)" },
		{ "trigger":"ROUND", "contents":"ROUND($0)" },
		{ "trigger":"sameTerm", "contents":"sameTerm($1, $0)" },
		{ "trigger":"SAMPLE", "contents":"SAMPLE($0)" },
		{ "trigger":"SECONDS", "contents":"SECONDS($0)" },
		{ "trigger":"SHA1", "contents":"SHA1{ $0 } ." },
		{ "trigger":"SHA256", "contents":"SHA256{ $0 } ." },
		{ "trigger":"SHA384", "contents":"SHA384{ $0 } ." },
		{ "trigger":"SHA512", "contents":"SHA512{ $0 } ." },
		{ "trigger":"STR", "contents":"STR($0)" },
		{ "trigger":"STRAFTER", "contents":"STRAFTER($1, $0)" },
		{ "trigger":"STRBEFORE", "contents":"STRBEFORE($1, $0)" },
		{ "trigger":"STRDT", "contents":"STRDT($1, $0)" },
		{ "trigger":"STRENDS", "contents":"STRENDS($1, $0)" },
		{ "trigger":"STRLANG", "contents":"STRLANG($1, $0)" },
		{ "trigger":"STRLEN", "contents":"STRLEN($0)" },
		{ "trigger":"STRSTARTS", "contents":"STRSTARTS($1, $0)" },
		{ "trigger":"SUBSTR", "contents":"SUBSTR($1, $0)" },
		{ "trigger":"SUM", "contents":"SUM($0)" },
		{ "trigger":"TIMEZONE", "contents":"TIMEZONE($0)" },
		{ "trigger":"TZ", "contents":"TZ($0)" },
		{ "trigger":"UCASE", "contents":"UCASE($0)" },
		{ "trigger":"UNION", "contents":"UNION { $0 } ." },
		{ "trigger":"URI", "contents":"URI($0)" },
		{ "trigger":"YEAR", "contents":"YEAR($0)" },
		"ADD ",
		"ALL ",
		"AS ",
		"ASC",
		"BASE ",
		"CLEAR ",
		"COPY ",
		"CREATE ",
		"DATA "
		"DEFAULT ",
		"DELETE DATA ",
		"DELETE WHERE ",
		"DESC",
		"DESCRIBE "
		"DISTINCT ",
		"DROP ",
		"false",
		"FROM ",
		"GRAPH ",
		"GROUP BY ",
		"HAVING ",
		"IN ",
		"INSERT DATA ",
		"LIMIT ",
		"LOAD ",
		"MOVE ",
		"NAMED ",
		"NOT ",
		"NOW",
		"OFFSET ",
		"ORDER BY ",
		"RAND",
		"REDUCED ",
		"SERVICE ",
		"SILENT ",
		"STRUUID",
		"true",
		"UNDEF ",
		"USING ",
		"UUID",
		"VALUES ",
		"WHERE ",
		"WITH ",
		"rdf:Alt",
		"rdf:Bag",
		"rdf:HTML",
		"rdf:first",
		"rdfs:isDefinedBy",
		"rdf:langString",
		"rdf:List",
		"rdf:nil",
		"rdf:object",
		"rdf:predicate",
		"rdf:Property",
		"rdf:rest",
		"rdfs:seeAlso",
		"rdf:Seq",
		"rdf:Statement",
		"rdf:subject",
		"rdf:type",
		"rdf:value",
		"rdf:XMLLiteral",
		"rdfs:Class",
		"rdfs:comment",
		"rdfs:Container",
		"rdfs:ContainerMembershipProperty",
		"rdfs:Datatype",
		"rdfs:domain",
		"rdfs:label",
		"rdfs:Literal",
		"rdfs:member",
		"rdfs:range",
		"rdfs:Resource",
		"rdfs:subClassOf",
		"rdfs:subPropertyOf",
		"owl:AllDifferent",
		"owl:AllDisjointClasses",
		"owl:AllDisjointProperties",
		"owl:allValuesFrom",
		"owl:annotatedProperty",
		"owl:annotatedSource",
		"owl:annotatedTarget",
		"owl:Annotation",
		"owl:AnnotationProperty",
		"owl:assertionProperty",
		"owl:AsymmetricProperty",
		"owl:Axiom",
		"owl:cardinality",
		"owl:Class",
		"owl:complementOf",
		"owl:DataRange",
		"owl:datatypeComplementOf",
		"owl:DatatypeProperty",
		"owl:deprecated",
		"owl:DeprecatedClass",
		"owl:DeprecatedProperty",
		"owl:differentFrom",
		"owl:disjointUnionOf",
		"owl:disjointWith",
		"owl:equivalentClass",
		"owl:equivalentProperty",
		"owl:FunctionalProperty",
		"owl:hasKey",
		"owl:hasSelf",
		"owl:hasValue",
		"owl:imports",
		"owl:intersectionOf",
		"owl:InverseFunctionalProperty",
		"owl:inverseOf",
		"owl:IrreflexiveProperty",
		"owl:maxCardinality",
		"owl:maxQualifiedCardinality",
		"owl:members",
		"owl:minCardinality",
		"owl:minQualifiedCardinality",
		"owl:NamedIndividual",
		"owl:NegativePropertyAssertion",
		"owl:Nothing",
		"owl:ObjectProperty",
		"owl:onClass",
		"owl:onDataRange",
		"owl:onDatatype",
		"owl:oneOf",
		"owl:onProperty",
		"owl:onProperties",
		"owl:Ontology",
		"owl:OntologyProperty",
		"owl:propertyChainAxiom",
		"owl:propertyDisjointWith",
		"owl:qualifiedCardinality",
		"owl:ReflexiveProperty",
		"owl:Restriction",
		"owl:sameAs",
		"owl:someValuesFrom",
		"owl:sourceIndividual",
		"owl:SymmetricProperty",
		"owl:targetIndividual",
		"owl:targetValue",
		"owl:Thing",
		"owl:TransitiveProperty",
		"owl:unionOf",
		"owl:versionIRI",
		"owl:versionInfo",
		"owl:withRestrictions",
		"xsd:string",
		"xsd:boolean",
		"xsd:decimal",
		"xsd:float",
		"xsd:double",
		"xsd:dateTime",
		"xsd:time",
		"xsd:date",
		"xsd:gYearMonth",
		"xsd:gYear",
		"xsd:gMonthDay",
		"xsd:gDay",
		"xsd:gMonth",
		"xsd:hexBinary",
		"xsd:base64Binary",
		"xsd:anyURI",
		"xsd:normalizedString",
		"xsd:token",
		"xsd:language",
		"xsd:NMTOKEN",
		"xsd:Name",
		"xsd:NCName",
		"xsd:integer",
		"xsd:nonPositiveInteger",
		"xsd:negativeInteger",
		"xsd:long",
		"xsd:int",
		"xsd:short",
		"xsd:byte",
		"xsd:nonNegativeInteger",
		"xsd:unsignedLong",
		"xsd:unsignedInt",
		"xsd:unsignedShort",
		"xsd:unsignedByte",
		"xsd:positiveInteger"
	]
}